<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Translation on RIDDL Documentation</title><link>https://riddl.tech/tooling/riddlc/translation/</link><description>Recent content in Translation on RIDDL Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>reid@reactific.com (Reid Spencer)</managingEditor><webMaster>reid@reactific.com (Reid Spencer)</webMaster><atom:link href="https://riddl.tech/tooling/riddlc/translation/index.xml" rel="self" type="application/rss+xml"/><item><title>riddlc options</title><link>https://riddl.tech/tooling/riddlc/translation/options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/tooling/riddlc/translation/options/</guid><description>Introduction Like many other complex programs, riddlc implements a variety of commands, each with their own functionality and their own options. As there are overlaps
Options come and go as riddlc evolves. If you experience issues with the command line options, you can always run riddlc without any options and it will explain the options your version supports. Common Options Some options are common to all the commands.
-h (&amp;ndash;help) Causes riddlc to print out help and usage information and exit.</description></item><item><title>Binary AST</title><link>https://riddl.tech/tooling/riddlc/translation/bast/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/tooling/riddlc/translation/bast/</guid><description>When the riddlc compiler parses a RIDDL document, it translates it to an Abstract Syntax Tree (AST) in memory. The AST is then used by other passes to validate and translate the AST into other forms. The binary AST (BAST) translator converts the AST in memory into a binary format that is stored for later usage. Saving the BAST format and then reading it back into the compiler avoids the time to both parse the RIDDL document and validate it for consistency.</description></item><item><title>Diagrams</title><link>https://riddl.tech/tooling/riddlc/translation/diagrams/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/tooling/riddlc/translation/diagrams/</guid><description/></item><item><title>Hugo Docs</title><link>https://riddl.tech/tooling/riddlc/translation/hugo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/tooling/riddlc/translation/hugo/</guid><description>One of the main features of the RIDDL compiler is generating HTML documentation. The documentation enjoys the advantage of being more complete and accurate due to the compiler&amp;rsquo;s rigorous analyses. The riddlc compiler generates Hugosources for conversion to a web-site by the hugo generator. See Hugo Documentation for details on how to</description></item><item><title>OpenAPI</title><link>https://riddl.tech/tooling/riddlc/translation/openapi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/tooling/riddlc/translation/openapi/</guid><description>RIDDL can generate OpenAPI (Swagger) input to document Application Programming Interfaces</description></item><item><title>Kalix</title><link>https://riddl.tech/tooling/riddlc/translation/kalix/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/tooling/riddlc/translation/kalix/</guid><description>The Kalix platform-as-a-service system represents one of the easiest methods by which RIDDL models can be turned into running systems. The riddlc program generates Kalix style protobuffers files from the RIDDL model. Kalix uses these files to generate Scala, Java, Javascript or Python code with a fill-in-the-blanks style for just the business logic.</description></item><item><title>Akka</title><link>https://riddl.tech/tooling/riddlc/translation/akka/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/tooling/riddlc/translation/akka/</guid><description>The goal of the Akka translator is to generate all the infrastructure code needed to support the domain(s) defined in the RIDDL input. While this does produce a working system, it also relieves developers of much of the repetitive, detail oriented infrastructure that is relatively boring compared to the business logic of the system.
This translator recognizes that its output will be co-mingled with the business logic output that developers are writing and keeps them separate.</description></item><item><title>Other Translators</title><link>https://riddl.tech/tooling/riddlc/translation/others/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/tooling/riddlc/translation/others/</guid><description/></item></channel></rss>