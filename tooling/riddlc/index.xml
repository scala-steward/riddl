<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>riddlc on RIDDL Documentation</title><link>https://riddl.tech/tooling/riddlc/</link><description>Recent content in riddlc on RIDDL Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>reid@reactific.com (Reid Spencer)</managingEditor><webMaster>reid@reactific.com (Reid Spencer)</webMaster><lastBuildDate>Tue, 01 Mar 2022 16:08:00 -0700</lastBuildDate><atom:link href="https://riddl.tech/tooling/riddlc/index.xml" rel="self" type="application/rss+xml"/><item><title>riddlc --help</title><link>https://riddl.tech/tooling/riddlc/command-line-help/</link><pubDate>Thu, 24 Feb 2022 14:19:59 -0700</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/tooling/riddlc/command-line-help/</guid><description>riddlc is the command that makes all the magic happen. As you will see, riddlc is a rich and powerful tool for processing RIDDL input.
Command Syntax overview riddlc uses a sub-command structure. At a high level, the command line syntax is very simple:
&amp;gt; riddlc [common options] command-name [command-options] Info Command Output For this version of riddlc:
&amp;gt; content % riddlc info [info] About riddlc: [info] name: riddlc [info] version: 0.</description></item><item><title>Download and install a release</title><link>https://riddl.tech/tooling/riddlc/download-and-use-a-release/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/tooling/riddlc/download-and-use-a-release/</guid><description>Starting with the 0.6.0 a &amp;ldquo;universal&amp;rdquo; release bundle is made available for Linux and MacOS Systems directly from GitHub. You can find them in the GitHub Releases section under &amp;ldquo;Assets&amp;rdquo;. Note that not all releases have these assets.
After downloading the .zip asset, you should:
Move that .zip file to somewhere in your home directory Unpack that .zip file with unzip &amp;lt;path-to-tgz&amp;gt; That will give you a directory like riddl-0.6.0/bin (the version # might be different) Put that bin directory in your path Now you can just run “riddlc” from anywhere Some day we will have a packaged installer.</description></item><item><title>How To Build `riddlc`</title><link>https://riddl.tech/tooling/riddlc/build/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/tooling/riddlc/build/</guid><description>1. Obtain source code &amp;gt; git clone https://github.com/reactific/riddl.git &amp;gt; cd riddl 2. Install JDK Please follow the directions provided by Adoptium to install OpenJDK on your machine. For MacOS users, this boils down to:
brew install --cask temurin 3. Install sbt Please follow the directions to install sbt which orchestrates the build for RIDDL. For MacOS users, this boils down to:
&amp;gt; brew install sbt 4. Build Within the cloned repository&amp;rsquo;s directory (step 1 above), run this command:</description></item><item><title>Using riddlc/actions/get-riddlc@main</title><link>https://riddl.tech/tooling/riddlc/using-the-get-riddlc-action/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/tooling/riddlc/using-the-get-riddlc-action/</guid><description>If you plan to develop a RIDDL specification and place the code for it into a GitHub repository, there is a GitHub action to automate the running of model validation and documentation generation in Pull Requests easier.
Defining A Workflow The workflow shown below is sufficient for many projects. You should be able to just copy and paste it to .github/workflows/validate-riddl.yaml and all your main merges and pushes to a pull-request branch will automatically validate the source.</description></item><item><title>riddlc Config File</title><link>https://riddl.tech/tooling/riddlc/from-config-file/</link><pubDate>Tue, 01 Mar 2022 16:08:00 -0700</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/tooling/riddlc/from-config-file/</guid><description>You can store your options to riddlc in a file and use that file with the from command. The configuration files use HOCON as the input format. Here&amp;rsquo;s an example:
# This file contains the input parameters to riddlc for use with `riddlc from` command. # We want to run the &amp;#34;hugo&amp;#34; command in riddlc so that riddl input is converted to input for the hugo web site generator. command = hugo # This block provides options that are common to any command.</description></item><item><title>Installing `riddlc`</title><link>https://riddl.tech/tooling/riddlc/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/tooling/riddlc/install/</guid><description>This guide helps you to install the riddlc tool on your local computer. Before installation, you will need to follow the steps defined on the build page.
Universal Installer RIDDL&amp;rsquo;s build system can generate a universal installation package that produces a zip file that can be unpacked and it provides a script to run on MacOS, Windows, and Linux.
1. Build Universal Installer &amp;gt; project riddlc &amp;gt; universal:packageBin 2. Move Generated ZIP File a.</description></item><item><title>Compilation</title><link>https://riddl.tech/tooling/riddlc/compilation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/tooling/riddlc/compilation/</guid><description>Introduction The Riddl compiler performs several analyses which are described in this section and known collectively as compilation. Each of these analyses occurs in a compilation phase, as described in the following sections.
Lexical Analysis Riddl uses the excellent fastparse library by Li Haoyi. This phase parses the raw textual input to make sure it is syntactically correct. From that syntax, an abstract syntax tree (AST) is produced. Incorrect syntax leads to errors without further analysis.</description></item><item><title>Compiling RIDDL</title><link>https://riddl.tech/tooling/riddlc/compilation-phases/</link><pubDate>Fri, 25 Feb 2022 10:35:37 -0700</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/tooling/riddlc/compilation-phases/</guid><description>Introduction The Riddl compiler (riddlc) performs several functions. These functions are organized into phases of execution which we will summarize below. Each phase generates outputs that are used as inputs for later phases.
Lexical Analysis This phase parses the raw textual input of the RIDDL sources to make sure it is syntactically correct. As the RIDDL source is analyzed an in-memory model of the RIDDL file known as an abstract syntax tree (AST) is constructed.</description></item></channel></rss>