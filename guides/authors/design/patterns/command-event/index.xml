<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Command/Event Patterns on RIDDL Documentation</title><link>https://riddl.tech/guides/authors/design/patterns/command-event/</link><description>Recent content in Command/Event Patterns on RIDDL Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>reid@reactific.com (Reid Spencer)</managingEditor><webMaster>reid@reactific.com (Reid Spencer)</webMaster><lastBuildDate>Fri, 25 Feb 2022 10:50:32 -0700</lastBuildDate><atom:link href="https://riddl.tech/guides/authors/design/patterns/command-event/index.xml" rel="self" type="application/rss+xml"/><item><title>1 - Same Event</title><link>https://riddl.tech/guides/authors/design/patterns/command-event/same-event/</link><pubDate>Fri, 25 Feb 2022 10:50:32 -0700</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/guides/authors/design/patterns/command-event/same-event/</guid><description>Question:
Should separate commands on the same entity all yield the same event, containing the exact changed entity?
Examples: event UserModified { id: MemberId, info: Info, members: MemberId*, contacts: Contacts, } Suggestions In an event driven system it is important to have distinct events for each operation such that there is a structural difference in the responses. This pattern is advised against for diverse sets of operations, and keeping in mind advantages of other patterns mentioned in this section.</description></item><item><title>2 - Same Parameters</title><link>https://riddl.tech/guides/authors/design/patterns/command-event/same-parameters/</link><pubDate>Fri, 25 Feb 2022 10:50:32 -0700</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/guides/authors/design/patterns/command-event/same-parameters/</guid><description>Question:
Should each command have its own event, containing the exact changed entity?
Examples: event OrganizationEstablished { id: OrganizationId info: Info, members: MemberId*, contacts: Contacts, } event OrganizationInfoModified { id: OrganizationId info: Info, members: MemberId*, contacts: Contacts, } event OrganizationMembersModified { id: OrganizationId info: Info, members: MemberId*, contacts: Contacts, } event OrganizationContactsModified { id: OrganizationId info: Info, members: MemberId*, contacts: Contacts, } Suggestions This affords much more traceability, but there is a lot of extraneous data coming back in non-creation events.</description></item><item><title>3 - Optional or List Parameters</title><link>https://riddl.tech/guides/authors/design/patterns/command-event/optional-parameters/</link><pubDate>Fri, 25 Feb 2022 10:50:32 -0700</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/guides/authors/design/patterns/command-event/optional-parameters/</guid><description>Question:
Should the event for each command have a version of the entity where all fields are optional, or lists, such that only changed data is sent back to the gateway?
Examples: type InfoUpdated { name: String?, address: Address?, members: MemberId*, isPrivate: Boolean?, } event OrganizationEstablished { id: OrganizationId info: Info, contacts: Contacts, } event OrganizationInfoModified { id: OrganizationId info: InfoUpdated, } event UserContactsModified { id: OrganizationId contacts: Contacts, } Suggestions This both removes clutter and makes it easier to see exactly what is going on in each event.</description></item><item><title>4 - Surfaced Parameters</title><link>https://riddl.tech/guides/authors/design/patterns/command-event/surfaced-parameters/</link><pubDate>Fri, 25 Feb 2022 10:50:32 -0700</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/guides/authors/design/patterns/command-event/surfaced-parameters/</guid><description>Question:
Should the events for each command have only the fields that might have changed, listed individually, when replying to gateway?
Examples: event UserMembersModified { id: OrganizationId, members: MemberId* } command AddUserPrimaryContacts { userId: MemberId, contact: MemberId* } command RemoveUserPrimaryContacts { userId: MemberId, contact: MemberId* } event OrganizationPrimaryContactsAdded { id: OrganizationId primaryContacts: MemberId+ } event OrganizationBillingContactsRemoved { id: OrganizationId primaryContacts: MemberId* } Suggestions This solution removes clutter, and offers more direct access to data than does optional parameters.</description></item></channel></rss>