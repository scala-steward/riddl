<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Grammar on RIDDL Documentation</title><link>https://riddl.tech/guides/developers/grammar/</link><description>Recent content in Grammar on RIDDL Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>reid@reactific.com (Reid Spencer)</managingEditor><webMaster>reid@reactific.com (Reid Spencer)</webMaster><atom:link href="https://riddl.tech/guides/developers/grammar/index.xml" rel="self" type="application/rss+xml"/><item><title>Terminals</title><link>https://riddl.tech/guides/developers/grammar/terminals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/guides/developers/grammar/terminals/</guid><description>This file shows the definition of the terminal symbols, as productions, and grouped in categories:
(* Terminal symbol definitions in various categories *) Terminals = Punctuation | Options | Keywords | Predefined | Readability | Operators; Punctuation = asterisk | comma | colon | curlyOpen | curlyClose | dot | equals | ellipsis | ellipsisQuestion | plus | question | quote | roundOpen | roundClose | squareOpen | squareClose | undefined | verticalBar ; asterisk = &amp;#34;*&amp;#34;; comma = &amp;#34;,&amp;#34;; colon = &amp;#34;:&amp;#34;; curlyOpen = &amp;#34;{&amp;#34;; curlyClose = &amp;#34;}&amp;#34;; dot = &amp;#34;.</description></item><item><title>Common</title><link>https://riddl.tech/guides/developers/grammar/common/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/guides/developers/grammar/common/</guid><description>A number of frequently used productions are useful to understand in the sections that follow. Commentary follows the grammar.
(* Common RIDDL EBNF Grammar Productions *) (******************************************************************** COMMON *) any char = ? any UTF-8 character ? ; any but newline = any char - ( &amp;#34;\n&amp;#34; | &amp;#34;\r&amp;#34; ) ; nonquote = any char - &amp;#39;&amp;#34;&amp;#39; ; digits = &amp;#34;0&amp;#34; | &amp;#34;1&amp;#34; | &amp;#34;2&amp;#34; | &amp;#34;3&amp;#34; | &amp;#34;4&amp;#34; | &amp;#34;5&amp;#34; | &amp;#34;6&amp;#34; | &amp;#34;7&amp;#34; | &amp;#34;8&amp;#34; | &amp;#34;9&amp;#34; ; literalInteger = digits literalString = quote nonquote quote ; literalStrings = literalString { literalString } ; markdownLine = verticalBar, any but newline, newline ; markdownLines= markdownLine { markdownLine.</description></item><item><title>Domain</title><link>https://riddl.tech/guides/developers/grammar/domain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/guides/developers/grammar/domain/</guid><description>See domains for examples and explanations of the following grammar productions
(* RIDDL EBNF Grammar for knowledge domains *) domain include = &amp;#34;include&amp;#34;, literalString domain content = typeDef | topic | interaction | context | domain | domainInclude domain = &amp;#34;domain&amp;#34;, identifier, &amp;#34;is&amp;#34;, &amp;#34;{&amp;#34;, (undefined | domainContent), &amp;#34;}&amp;#34;, description</description></item><item><title>Context</title><link>https://riddl.tech/guides/developers/grammar/context/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/guides/developers/grammar/context/</guid><description>DDD bounded contexts are represented in RIDDL with the context definition whose syntax is:
(* RIDDL EBNF Grammar for bounded contexts *) context options = options(&amp;#34;wrapper&amp;#34; | &amp;#34;gateway&amp;#34; | &amp;#34;function&amp;#34;) context include = &amp;#34;include&amp;#34;, literalString context definitions = typedef | entity | adaptor | interaction | contextInclude context = &amp;#34;context&amp;#34;, identifier, is, open, (undefined | context options, context definitions), close, description }</description></item><item><title>Entity</title><link>https://riddl.tech/guides/developers/grammar/entity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/guides/developers/grammar/entity/</guid><description>(* RIDDL EBNF Grammar For Entity definition *) entity = entity kind, &amp;#34;entity&amp;#34;, &amp;#34;is&amp;#34;, &amp;#34;{&amp;#34;, entity options, entity definitions, &amp;#34;}&amp;#34;, description ; entity kind = [ &amp;#34;device&amp;#34; | &amp;#34;actor&amp;#34; | &amp;#34;concept&amp;#34;] ; entity options = single option | multi options ; single-option = &amp;#34;option&amp;#34;, &amp;#34;is&amp;#34;, entity option kinds; multi-option = &amp;#34;options&amp;#34;, &amp;#34;(&amp;#34;, { entity option kinds }, &amp;#34;)&amp;#34;; entity option kinds = &amp;#34;event sourced&amp;#34; | &amp;#34;value&amp;#34; | &amp;#34;aggregate&amp;#34; | &amp;#34;persistent&amp;#34; | &amp;#34;consistent&amp;#34; | &amp;#34;available&amp;#34;; entity definition = handler | feature | function | invariant | typeDef | state; entity definitions = entity definition { entity definition } ; entity state = &amp;#34;state&amp;#34;, identifier, &amp;#34;is&amp;#34;, &amp;#34;{&amp;#34;, identifier, &amp;#34;is&amp;#34;, typeExpression, &amp;#34;}&amp;#34;, description State A state is defined with the state keyword in the content of an entity using this syntax:</description></item><item><title>Root</title><link>https://riddl.tech/guides/developers/grammar/root/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/guides/developers/grammar/root/</guid><description>(* RIDDL Grammar For Root - TBD *) root = domain | domain include TBD</description></item></channel></rss>