<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Developer's Guide on RIDDL Documentation</title><link>https://riddl.tech/guides/developers/</link><description>Recent content in Developer's Guide on RIDDL Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>reid@reactific.com (Reid Spencer)</managingEditor><webMaster>reid@reactific.com (Reid Spencer)</webMaster><lastBuildDate>Sat, 06 Aug 2022 10:50:32 -0700</lastBuildDate><atom:link href="https://riddl.tech/guides/developers/index.xml" rel="self" type="application/rss+xml"/><item><title>Principles</title><link>https://riddl.tech/guides/developers/principles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/guides/developers/principles/</guid><description>RIDDL is a high level system specification language and as such must obey some principles of such languages. This page provides those principles.
1: Declarative RIDDL is not an implementation language and does not pretend to be computationally complete. RIDDL adopts this what not how principle. Details are for software developers. The analyst or architect that writes RIDDL documents wants to only specify what the system is while abstracting away the process of constructing it.</description></item><item><title>Dependencies</title><link>https://riddl.tech/guides/developers/dependencies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/guides/developers/dependencies/</guid><description> Dependencies The riddl code base targets Java 17 and Scala 2.13.7 with -XSource:3 in preparation for Scala 3.0 code conversion. Moving to Scala 3 requires all dependencies to make the same transition:
fastparse uses macros and is waiting for bugs in scala 3 to be fixed pureconfig is nearly ready for scala 3</description></item><item><title>testing</title><link>https://riddl.tech/guides/developers/testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/guides/developers/testing/</guid><description>Ways To Test RIDDL ScalaTest There are many test points already defined in language/src/tests/scala using ScalaTest. In general, any change in language should be done in TDD style with tests cases written before code to make that test case pass. This is how the parser and validator were created. That tradition needs to continue.
&amp;ldquo;Check&amp;rdquo; Tests In language/src/test/input there are a variety of tests with .check files that have the same basename as the .</description></item><item><title>Releasing RIDDL</title><link>https://riddl.tech/guides/developers/releasing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/guides/developers/releasing/</guid><description>This is a &amp;ldquo;how to&amp;rdquo; guide on releasing the software.
Build &amp;amp; Test Make sure everything tests correctly from a clean start.
&amp;gt; cd riddl # top level directory of repository &amp;gt; sbt &amp;#34;clean ; test ; test ; test&amp;#34; ... [info] All tests passed. If all tests do not pass, stop and fix the software. Note that the tests are run three times quickly. This tends to expose parallelism issues.</description></item><item><title/><link>https://riddl.tech/guides/developers/checking-documentation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/guides/developers/checking-documentation/</guid><description>After making documentation changes, it is best to visualize those changes to check that the documentation is still generating correctly and readable.
This is pretty simple.
Install Hugo You need to make sure Hugo is installed:
brew install hugo Run Hugo Then run the hugo server:
cd doc/src/hugo hugo server --disableFastRender -D The --disableFastRender means that hugo won&amp;rsquo;t cache results but read from source on each request. The -D option instructs to load all pages, even the ones marked as drafts.</description></item></channel></rss>