<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Common on RIDDL Documentation</title><link>https://riddl.tech/language/common/</link><description>Recent content in Common on RIDDL Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>reid@reactific.com (Reid Spencer)</managingEditor><webMaster>reid@reactific.com (Reid Spencer)</webMaster><atom:link href="https://riddl.tech/language/common/index.xml" rel="self" type="application/rss+xml"/><item><title>Documentation Conventions</title><link>https://riddl.tech/language/common/doc-conventions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/language/common/doc-conventions/</guid><description>This page defines the conventions we use throughout this documentation.
RIDDL Snippets Whenever we include RIDDL source code in the documentation it will be in a fixed sized font like this:
domain MyDomain is { ??? } Notes Whenever an incidental note needs to be presented, it will be shown in blue like this paragraph. Recommendations Whenever an important recommendation needs to be made it will be shown in green like this paragraph.</description></item><item><title>Language Conventions</title><link>https://riddl.tech/language/common/lang-conventions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/language/common/lang-conventions/</guid><description>Introduction Syntax conventions of RIDDL are very simple and lenient. The intended audience is business owners, business analysts, domain engineers, and software architects. It is intentionally simple and readable. The language is free in its formatting. It does not require indentation and its various constructs can be arranged on any line. RIDDL supports the definition of a variety of concepts taken directly from Domain Driven Design and the Unified Modeling Language as well as software architecture.</description></item><item><title>Descriptions</title><link>https://riddl.tech/language/common/descriptions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/language/common/descriptions/</guid><description>The RIDDL syntax is simply a hierarchical arrangement of definitions. Each definition can have a description. Descriptions are used to generate documentation and they follow markdown conventions.
Examples There are several ways to describe a definition. In each of the examples we attach a description to some domain named Foo. The definition is not important for our purposes here. Descriptions come after the definition using one of five phrases:
described by described as described in file &amp;quot;&amp;lt;filename&amp;gt;&amp;quot; explained by explained in file &amp;quot;&amp;lt;filename&amp;gt;&amp;quot; These four phrases are equivalent but provided to suit the nature of the definitions to which they may be applied.</description></item><item><title>Identifiers</title><link>https://riddl.tech/language/common/identifiers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/language/common/identifiers/</guid><description>Identifiers are the names of definitions. In the following domain definition,
domain foo is { ??? } the identifier is foo. Identifiers can be specified in two ways:
simple: any alphabetic character followed by alphanumerics or underscore quoted: &amp;quot; followed by a string of characters chosen from this set: a-zA-Z0-9_+\-|/@$%&amp;amp;, :&amp;quot; followed by a &amp;quot; Path Identifiers In several places in RIDDL, you may need to reference a definition in another definition.</description></item><item><title>Examples</title><link>https://riddl.tech/language/common/examples/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/language/common/examples/</guid><description>RIDDL uses Gherkin examples in various places to express a functionality or behavior requirement on the definition that uses it. Gherkin examples are used in these places:
Adaptors Handlers Functions Processors Projections Saga Actions Story Structure Gherkin is a language developed by SmartBear Software, a vendor of software quality tools, for the cucumber testing system. RIDDL uses a subset of the language as SmartBear has defined it. Four constructs are used in RIDDL:</description></item><item><title>Types</title><link>https://riddl.tech/language/common/types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/language/common/types/</guid><description>Introduction The RIDDL language allows users to define data types. Definitions of types are more limited in RIDDL than in programming languages on purpose. The type system must be easily understandable by non-programmers as the domain engineer or domain expert is likely the most frequent user.
Predefined Types RIDDL supports several predefined types that just &amp;ldquo;exist&amp;rdquo; because they are fundamental and well understood in any targeted computing environment. These predefined type names can be used anywhere that a type definition is needed, for example in a field of an entity&amp;rsquo;s state definition see here</description></item><item><title>Expressions</title><link>https://riddl.tech/language/common/expressions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/language/common/expressions/</guid><description>RIDDL allows expressions to be specified in various places. Most frequently they are the operands to message constructors and when clauses in Gherkin examples. This page shows you what you can do with expressions in RIDDL.
Expressions Expressions compute values of arbitrary types. Since RIDDL is not a programming language, the syntax used for expressions is minimal and abstract. There is no attempt in RIDDL to be computationally complete. Supporting expression is merely for the convenience to requirements writers.</description></item><item><title>Includes</title><link>https://riddl.tech/language/common/includes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/language/common/includes/</guid><description>An include statement is not a RIDDL definition but an instruction to the compiler to lexically replace the include statement with the content of another file. The name of the file to include is the statement&amp;rsquo;s only parameter, like this:
include &amp;#34;other-file.riddl&amp;#34; The include statement is only permitted where major definitions are expected, specifically at root level, and in the bodies of domain, context, entity, and pipe definitions.</description></item><item><title>Functions</title><link>https://riddl.tech/language/common/functions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/language/common/functions/</guid><description>Introduction Functions are pieces of processing that can be defined in various places as a shorthand for often repeated processing steps. A function has a set of inputs (its requirements) and a set of output (what it yields). Functions need not be pure and often have side effects through the state changes of an entity.
Example Here&amp;rsquo;s an example of a function, named riddle, that requires a Subject(String) type and returns a Riddle (String) type.</description></item><item><title>Imports</title><link>https://riddl.tech/language/common/imports/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/language/common/imports/</guid><description>This feature is not implemented yet.
An import statement may be used to import a definition from a BAST file that was generated from a prior compilation. Import statements help to save time when a prior compilation has completed and been saved as a BAST file.</description></item><item><title>Options</title><link>https://riddl.tech/language/common/options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/language/common/options/</guid><description>Many definitions can have options. These are hints or processing instructions to the various translator tools.
need more detail</description></item></channel></rss>