<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Context on RIDDL Documentation</title><link>https://riddl.tech/language/root/domain/context/</link><description>Recent content in Context on RIDDL Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>reid@reactific.com (Reid Spencer)</managingEditor><webMaster>reid@reactific.com (Reid Spencer)</webMaster><atom:link href="https://riddl.tech/language/root/domain/context/index.xml" rel="self" type="application/rss+xml"/><item><title>Projections</title><link>https://riddl.tech/language/root/domain/context/projections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/language/root/domain/context/projections/</guid><description>Introduction A projection is a read-only view of entity information. Projections are necessary since entities use event sourcing which is not a query-friendly format.
Here&amp;rsquo;s the projection process. Usually, events are logged as they are kept appended at the end of the log file. Logs are string and text. To retrieving meaningful information out of logs, logs are transformed into a more query-friendly format and stored in queriable repository or DB.</description></item><item><title>Features</title><link>https://riddl.tech/language/root/domain/context/features/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/language/root/domain/context/features/</guid><description>A Feature is a requirement on a context. Features are specified very similarly to the Gherkin language. The same keywords are used and the style is more like RIDDL syntax. If you&amp;rsquo;re already familiar with Gherkin then an example should suffice:
Feature &amp;#34;Guess the word&amp;#34; is { // The first example has two steps Scenario &amp;#34;Maker starts a game&amp;#34; is { When the Maker starts a game Then the Maker waits for a Breaker to join } // The second example has three steps Scenario &amp;#34;Breaker joins a game&amp;#34; is { Given the Maker has started a game with a word When the Breaker joins the Maker&amp;#39;s game Then the Breaker must guess a word knowing the length of the Maker&amp;#39;s word choice.</description></item><item><title>Context Handler</title><link>https://riddl.tech/language/root/domain/context/handler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/language/root/domain/context/handler/</guid><description>A handler definition in a context specifies how that bounded context should handle messages sent to it.
Note that an Entity can define a handler too, but they are different than the handlers defined in a context. See Entity Handler for more details. There are two kinds of handlers as described in the following sections. They are differentiated by the existence of a for clause in their definition. If they have for clause, then they are [Projection Handlers](#Projection Handler) ; otherwise they are [API Handlers](#API Handler)</description></item></channel></rss>