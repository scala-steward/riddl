<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Index on RIDDL Documentation</title><link>https://riddl.tech/</link><description>Recent content in Index on RIDDL Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>reid@reactific.com (Reid Spencer)</managingEditor><webMaster>reid@reactific.com (Reid Spencer)</webMaster><lastBuildDate>Wed, 01 Dec 2021 15:34:22 -0500</lastBuildDate><atom:link href="https://riddl.tech/index.xml" rel="self" type="application/rss+xml"/><item><title>Analyses</title><link>https://riddl.tech/future-work/analyses/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/future-work/analyses/</guid><description> Uses/Used-by Common to many programming language compilers, RIDDL too needs to be able to generate a pair of maps
uses = key is a definition, value is a list of definitions used by the key used-by = key is a definition, value is a list of definitions that use the key</description></item><item><title>riddlc options</title><link>https://riddl.tech/tooling/riddlc/translation/options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/tooling/riddlc/translation/options/</guid><description>Introduction Like many other complex programs, riddlc implements a variety of commands, each with their own functionality and their own options. As there are overlaps
Options come and go as riddlc evolves. If you experience issues with the command line options, you can always run riddlc without any options and it will explain the options your version supports. Common Options Some options are common to all the commands.
-h (&amp;ndash;help) Causes riddlc to print out help and usage information and exit.</description></item><item><title>CEO of Reactive BBQ</title><link>https://riddl.tech/tutorial/rbbq/scenario/ceo/</link><pubDate>Fri, 25 Feb 2022 14:36:43 -0700</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/tutorial/rbbq/scenario/ceo/</guid><description>How would you describe your restaurants?
Reactive BBQ is a family restaurant with 500 locations across 20 countries. We&amp;rsquo;re open for breakfast, lunch and supper. Our specialty at Reactive BBQ is our award winning Reactive Ribs, but we are also well known for our tender steaks and our slow roasted chicken. We take traditional BBQ flavours and give them a bit of a spicy punch. The customer experience at each Reactive BBQ should have the same high level of quality across the globe.</description></item><item><title>1 - Same Event</title><link>https://riddl.tech/guides/authors/design/patterns/command-event/same-event/</link><pubDate>Fri, 25 Feb 2022 10:50:32 -0700</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/guides/authors/design/patterns/command-event/same-event/</guid><description>Question:
Should separate commands on the same entity all yield the same event, containing the exact changed entity?
Examples: event UserModified { id: MemberId, info: Info, members: MemberId*, contacts: Contacts, } Suggestions In an event driven system it is important to have distinct events for each operation such that there is a structural difference in the responses. This pattern is advised against for diverse sets of operations, and keeping in mind advantages of other patterns mentioned in this section.</description></item><item><title>2 - Same Parameters</title><link>https://riddl.tech/guides/authors/design/patterns/command-event/same-parameters/</link><pubDate>Fri, 25 Feb 2022 10:50:32 -0700</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/guides/authors/design/patterns/command-event/same-parameters/</guid><description>Question:
Should each command have its own event, containing the exact changed entity?
Examples: event OrganizationEstablished { id: OrganizationId info: Info, members: MemberId*, contacts: Contacts, } event OrganizationInfoModified { id: OrganizationId info: Info, members: MemberId*, contacts: Contacts, } event OrganizationMembersModified { id: OrganizationId info: Info, members: MemberId*, contacts: Contacts, } event OrganizationContactsModified { id: OrganizationId info: Info, members: MemberId*, contacts: Contacts, } Suggestions This affords much more traceability, but there is a lot of extraneous data coming back in non-creation events.</description></item><item><title>3 - Optional or List Parameters</title><link>https://riddl.tech/guides/authors/design/patterns/command-event/optional-parameters/</link><pubDate>Fri, 25 Feb 2022 10:50:32 -0700</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/guides/authors/design/patterns/command-event/optional-parameters/</guid><description>Question:
Should the event for each command have a version of the entity where all fields are optional, or lists, such that only changed data is sent back to the gateway?
Examples: type InfoUpdated { name: String?, address: Address?, members: MemberId*, isPrivate: Boolean?, } event OrganizationEstablished { id: OrganizationId info: Info, contacts: Contacts, } event OrganizationInfoModified { id: OrganizationId info: InfoUpdated, } event UserContactsModified { id: OrganizationId contacts: Contacts, } Suggestions This both removes clutter and makes it easier to see exactly what is going on in each event.</description></item><item><title>4 - Surfaced Parameters</title><link>https://riddl.tech/guides/authors/design/patterns/command-event/surfaced-parameters/</link><pubDate>Fri, 25 Feb 2022 10:50:32 -0700</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/guides/authors/design/patterns/command-event/surfaced-parameters/</guid><description>Question:
Should the events for each command have only the fields that might have changed, listed individually, when replying to gateway?
Examples: event UserMembersModified { id: OrganizationId, members: MemberId* } command AddUserPrimaryContacts { userId: MemberId, contact: MemberId* } command RemoveUserPrimaryContacts { userId: MemberId, contact: MemberId* } event OrganizationPrimaryContactsAdded { id: OrganizationId primaryContacts: MemberId+ } event OrganizationBillingContactsRemoved { id: OrganizationId primaryContacts: MemberId* } Suggestions This solution removes clutter, and offers more direct access to data than does optional parameters.</description></item><item><title>Design Tips</title><link>https://riddl.tech/guides/authors/design-tips/</link><pubDate>Fri, 25 Feb 2022 10:50:32 -0700</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/guides/authors/design-tips/</guid><description>Domain Hierarchy When considering how to organize your specification into a set , there are no formal rules. Domains are fuzzy concepts on purpose. However, here are a few things that might help:
Domain, Subdomain, Bounded Context, Problem/Solution Space in DDD: Clearly Defined Domain Drive Design: Domain Definition Use the communication structure of the organization per Conway&amp;rsquo;s Law Use the Event Storming process, and then look for the event groupings.</description></item><item><title>What Is RIDDL?</title><link>https://riddl.tech/introduction/what-is-riddl/</link><pubDate>Fri, 25 Feb 2022 10:07:32 -0700</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/introduction/what-is-riddl/</guid><description>RIDDL gets its name from an acronym that stands for Reactive Interface with Domain Definition Language.
RIDDL is a specification language for the niche of large, distributed, reactive, concurrent systems such as required for modern internet-scale applications or corporate back office infrastructure.
RIDDL is a variety of software libraries and tools, provided in this GitHub repository, that allow humans to work with the language to create their own derivative works.</description></item><item><title>riddlc --help</title><link>https://riddl.tech/tooling/riddlc/command-line-help/</link><pubDate>Thu, 24 Feb 2022 14:19:59 -0700</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/tooling/riddlc/command-line-help/</guid><description>riddlc is the command that makes all the magic happen. As you will see, riddlc is a rich and powerful tool for processing RIDDL input.
Command Syntax overview riddlc uses a sub-command structure. At a high level, the command line syntax is very simple:
&amp;gt; riddlc [common options] command-name [command-options] Info Command Output For this version of riddlc:
&amp;gt; content % riddlc info [info] About riddlc: [info] name: riddlc [info] version: 0.</description></item><item><title>Binary AST</title><link>https://riddl.tech/future-work/bast/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/future-work/bast/</guid><description>When the riddlc compiler parses a RIDDL document, it translates it to an Abstract Syntax Tree (AST) in memory. The AST is then used by other passes to validate and translate the AST into other forms. The binary AST (BAST) translator converts the AST in memory into a binary format that is stored for later usage. Saving the BAST format and then reading it back into the compiler avoids the time to both parse the RIDDL document and validate it for consistency.</description></item><item><title>Options</title><link>https://riddl.tech/language/root/domain/context/entity/options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/language/root/domain/context/entity/options/</guid><description>The optional entity kind prefix is a directive that suggests how the entity might handle its state and received messages. In the example above, we expect the &amp;ldquo;Printer&amp;rdquo; entity to be a physical device. An &amp;ldquo;actor&amp;rdquo; entity in of the same name could be expected to be a person who prints.
The options available suggest how the entity might handle its state and message input:
kind - indicates the intended kind of entity in an argument to the kind entity.</description></item><item><title>Reactive Summit</title><link>https://riddl.tech/reactive-summit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/reactive-summit/</guid><description>Welcome, Reactive Summit 2022 attendees!
Important Links Shown At Reactive Summit 2022 Documentation (here): https://riddl.tech Source Code: https://github.com/reactific/riddl Discussions: https://github.com/reactific/riddl/discussions Example: https://github.com/improving-app/riddl Contact: reid.spencer@improving.com Other Information Full Slide Deck
Reid&amp;rsquo;s LinkedIn Profile
Please send a link request and a note mentioning Reactive Summit</description></item><item><title>State</title><link>https://riddl.tech/language/root/domain/context/entity/state/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/language/root/domain/context/entity/state/</guid><description>The state definitions of an entity define the structure of the information that the entity retains as its current state.
Syntax Example The state of an entity is defined with the state keyword within the content of an entitydefinition, like this:
entity Car { type Propulsion = any of { ICE, Electric, Steam, Diesel, EMDrive } state Static is { wheels: Integer doors: Integer rightHandDrive: Boolean propulsion: Propulsion } } One of the primary purposes of an entity is to represent the characteristics of the entity with state information.</description></item><item><title>Terminals</title><link>https://riddl.tech/guides/developers/grammar/terminals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/guides/developers/grammar/terminals/</guid><description>This file shows the definition of the terminal symbols, as productions, and grouped in categories:
(* Terminal symbol definitions in various categories *) Terminals = Punctuation | Options | Keywords | Predefined | Readability | Operators; Punctuation = asterisk | comma | colon | curlyOpen | curlyClose | dot | equals | ellipsis | ellipsisQuestion | plus | question | quote | roundOpen | roundClose | squareOpen | squareClose | undefined | verticalBar ; asterisk = &amp;#34;*&amp;#34;; comma = &amp;#34;,&amp;#34;; colon = &amp;#34;:&amp;#34;; curlyOpen = &amp;#34;{&amp;#34;; curlyClose = &amp;#34;}&amp;#34;; dot = &amp;#34;.</description></item><item><title>Documentation Conventions</title><link>https://riddl.tech/language/common/doc-conventions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/language/common/doc-conventions/</guid><description>This page defines the conventions we use throughout this documentation.
RIDDL Snippets Whenever we include RIDDL source code in the documentation it will be in a fixed sized font like this:
domain MyDomain is { ??? } Notes Whenever an incidental note needs to be presented, it will be shown in blue like this paragraph. Recommendations Whenever an important recommendation needs to be made it will be shown in green like this paragraph.</description></item><item><title>Language Conventions</title><link>https://riddl.tech/language/common/lang-conventions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/language/common/lang-conventions/</guid><description>Introduction Syntax conventions of RIDDL are very simple and lenient. The intended audience is business owners, business analysts, domain engineers, and software architects. It is intentionally simple and readable. The language is free in its formatting. It does not require indentation and its various constructs can be arranged on any line. RIDDL supports the definition of a variety of concepts taken directly from Domain Driven Design and the Unified Modeling Language as well as software architecture.</description></item><item><title>Descriptions</title><link>https://riddl.tech/language/common/descriptions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/language/common/descriptions/</guid><description>The RIDDL syntax is simply a hierarchical arrangement of definitions. Each definition can have a description. Descriptions are used to generate documentation and they follow markdown conventions.
Examples There are several ways to describe a definition. In each of the examples we attach a description to some domain named Foo. The definition is not important for our purposes here. Descriptions come after the definition using one of five phrases:
described by described as described in file &amp;quot;&amp;lt;filename&amp;gt;&amp;quot; explained by explained in file &amp;quot;&amp;lt;filename&amp;gt;&amp;quot; These four phrases are equivalent but provided to suit the nature of the definitions to which they may be applied.</description></item><item><title>Corporate Head Chef</title><link>https://riddl.tech/tutorial/rbbq/scenario/headchef/</link><pubDate>Fri, 25 Feb 2022 14:36:52 -0700</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/tutorial/rbbq/scenario/headchef/</guid><description>What is your role in the restaurant?
Corporate wants each restaurant to have a consistent experience. My job is to create new recipes to be included in the menu. I spend a lot of time trying out different ingredients and flavours to try to get the right balance for our menu. I have to be careful to stick to ingredients that we can buy in sufficient quantities. Most people think that a restaurant like ours prepares everything from scratch.</description></item><item><title>What can RIDDL do?</title><link>https://riddl.tech/introduction/what-can-riddl-do/</link><pubDate>Fri, 25 Feb 2022 10:07:32 -0700</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/introduction/what-can-riddl-do/</guid><description>RIDDL is a software specification language. As a consequence of it being a language, it has a software tool, riddlc (riddl compiler), that can be used to do a variety of things. Most of those things involve reading riddl input files, checking them, and producing some output file(s).
Input The input to riddlc is always a single file with the .riddl suffix. This is a text file that contains definitions in the RIDDL syntax.</description></item><item><title>IntelliJ Plugin</title><link>https://riddl.tech/tooling/editor-plugins/intellij-plugin/</link><pubDate>Thu, 24 Feb 2022 14:19:12 -0700</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/tooling/editor-plugins/intellij-plugin/</guid><description>This project has not started yet but has a high priority attached to it.
Like other languages, RIDDL will have an IntelliJ Plugin to do syntax highlighting and error checking to help the author write the language effectively.</description></item><item><title>Common</title><link>https://riddl.tech/guides/developers/grammar/common/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/guides/developers/grammar/common/</guid><description>A number of frequently used productions are useful to understand in the sections that follow. Commentary follows the grammar.
(* Common RIDDL EBNF Grammar Productions *) (******************************************************************** COMMON *) any char = ? any UTF-8 character ? ; any but newline = any char - ( &amp;#34;\n&amp;#34; | &amp;#34;\r&amp;#34; ) ; nonquote = any char - &amp;#39;&amp;#34;&amp;#39; ; digits = &amp;#34;0&amp;#34; | &amp;#34;1&amp;#34; | &amp;#34;2&amp;#34; | &amp;#34;3&amp;#34; | &amp;#34;4&amp;#34; | &amp;#34;5&amp;#34; | &amp;#34;6&amp;#34; | &amp;#34;7&amp;#34; | &amp;#34;8&amp;#34; | &amp;#34;9&amp;#34; ; literalInteger = digits literalString = quote nonquote quote ; literalStrings = literalString { literalString } ; markdownLine = verticalBar, any but newline, newline ; markdownLines= markdownLine { markdownLine.</description></item><item><title>Diagrams</title><link>https://riddl.tech/future-work/diagrams/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/future-work/diagrams/</guid><description/></item><item><title>Download and install a release</title><link>https://riddl.tech/tooling/riddlc/download-and-use-a-release/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/tooling/riddlc/download-and-use-a-release/</guid><description>Starting with the 0.6.0 a &amp;ldquo;universal&amp;rdquo; release bundle is made available for Linux and MacOS Systems directly from GitHub. You can find them in the GitHub Releases section under &amp;ldquo;Assets&amp;rdquo;. Note that not all releases have these assets.
After downloading the .zip asset, you should:
Move that .zip file to somewhere in your home directory Unpack that .zip file with unzip &amp;lt;path-to-tgz&amp;gt; That will give you a directory like riddl-0.6.0/bin (the version # might be different) Put that bin directory in your path Now you can just run “riddlc” from anywhere Some day we will have a packaged installer.</description></item><item><title>How To Build `riddlc`</title><link>https://riddl.tech/tooling/riddlc/build/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/tooling/riddlc/build/</guid><description>1. Obtain source code &amp;gt; git clone https://github.com/reactific/riddl.git &amp;gt; cd riddl 2. Install JDK Please follow the directions provided by Adoptium to install OpenJDK on your machine. For MacOS users, this boils down to:
brew install --cask temurin 3. Install sbt Please follow the directions to install sbt which orchestrates the build for RIDDL. For MacOS users, this boils down to:
&amp;gt; brew install sbt 4. Build Within the cloned repository&amp;rsquo;s directory (step 1 above), run this command:</description></item><item><title>Identifiers</title><link>https://riddl.tech/language/common/identifiers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/language/common/identifiers/</guid><description>Identifiers are the names of definitions. In the following domain definition,
domain foo is { ??? } the identifier is foo. Identifiers can be specified in two ways:
simple: any alphabetic character followed by alphanumerics or underscore quoted: &amp;quot; followed by a string of characters chosen from this set: a-zA-Z0-9_+\-|/@$%&amp;amp;, :&amp;quot; followed by a &amp;quot; Path Identifiers In several places in RIDDL, you may need to reference a definition in another definition.</description></item><item><title>Invariants</title><link>https://riddl.tech/language/root/domain/context/entity/invariants/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/language/root/domain/context/entity/invariants/</guid><description>Invariants specify rules about the state of an entity that must never be violated. Invariants typically come from business logic assertions. For example, a business axiom of a warehouse might be that the supply of a product should never be below 1. That is, the warehouse should never completely run out of a product it is storing. Reality, of course, must account for the supply running out; nevertheless specifying an invariant on the business intent may be important.</description></item><item><title>Pipes</title><link>https://riddl.tech/language/root/domain/streaming/pipe/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/language/root/domain/streaming/pipe/</guid><description>Pipes are uni-directional conduits for reliably transmitting data of a particular type between the publishers and consumers attached at the ends of the pipe.
Syntax Example pipe WeatherForecast is { options rate(1000), paritions(7), transmits type Forecast } In the foregoing, a pipe named WeatherForecast is defined to transmit the data type named Forecast and with two options:
rate - an expected sustained rate of 1000 data points per second partitions - a minimum number of partitions on the data of 7 Data Transmission Type Pipes can transmit any data type that RIDDL can specify.</description></item><item><title>RBBQ Scenarios</title><link>https://riddl.tech/tutorial/rbbq/scenario/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/tutorial/rbbq/scenario/</guid><description>Case Study The Reactive BBQ restaurant chain has determined that their existing restaurant operations system is not suitably meeting their needs and have hired a high technology consulting company to provide some needed guidance on how they can improve their customer service, tracking, and reliability.
What follows are the interviews conducted with key personnel at Reactive BBQ in order to identify the issues.
CEO of Reactive BBQ How would you describe your restaurants?</description></item><item><title>Using riddlc/actions/get-riddlc@main</title><link>https://riddl.tech/tooling/riddlc/using-the-get-riddlc-action/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/tooling/riddlc/using-the-get-riddlc-action/</guid><description>If you plan to develop a RIDDL specification and place the code for it into a GitHub repository, there is a GitHub action to automate the running of model validation and documentation generation in Pull Requests easier.
Defining A Workflow The workflow shown below is sufficient for many projects. You should be able to just copy and paste it to .github/workflows/validate-riddl.yaml and all your main merges and pushes to a pull-request branch will automatically validate the source.</description></item><item><title>Different Ways To Get/Use RIDDL</title><link>https://riddl.tech/guides/implementors/ways-to-use-riddl/</link><pubDate>Sat, 06 Aug 2022 10:50:32 -0700</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/guides/implementors/ways-to-use-riddl/</guid><description>There are several ways to get riddl software on to your computer, depending on how you want to work.
Download Staged Integrate With SBT RiddlSbtPlugin Download This is the simplest way to get riddlc. It should run on Windows, Mac and Linux. Follow these steps:
Go to the riddlc downloads page Click on the release title you want to install Scroll down to the &amp;ldquo;Assets&amp;rdquo; section Download the riddlc-{version}.zip file Unzip that file on your computer Place the riddlc-{version}/bin directory in your path Staged To use riddlc locally and be able to update it with new changes without a large download, use this approach:</description></item><item><title>riddlc Config File</title><link>https://riddl.tech/tooling/riddlc/from-config-file/</link><pubDate>Tue, 01 Mar 2022 16:08:00 -0700</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/tooling/riddlc/from-config-file/</guid><description>You can store your options to riddlc in a file and use that file with the from command. The configuration files use HOCON as the input format. Here&amp;rsquo;s an example:
# This file contains the input parameters to riddlc for use with `riddlc from` command. # We want to run the &amp;#34;hugo&amp;#34; command in riddlc so that riddl input is converted to input for the hugo web site generator. command = hugo # This block provides options that are common to any command.</description></item><item><title>Host</title><link>https://riddl.tech/tutorial/rbbq/scenario/host/</link><pubDate>Fri, 25 Feb 2022 14:37:00 -0700</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/tutorial/rbbq/scenario/host/</guid><description>What is your role in the restaurant?
I answer phones and record reservations. I also greet and seat guests as they arrive at the restaurant. Guests can either call, or use the website to make reservations, so it is necessary for me to consult the system before I seat customers. I also need to update the reservations system when I seat customers so that someone online can&amp;rsquo;t reserve the same table.</description></item><item><title>VSCode Plugin</title><link>https://riddl.tech/tooling/editor-plugins/vs-code-plugin/</link><pubDate>Thu, 24 Feb 2022 14:19:27 -0700</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/tooling/editor-plugins/vs-code-plugin/</guid><description>This project has not started yet but has a high priority attached to it.
Like other languages, RIDDL will have a Visual Studio Code plugin to do syntax highlighting and error checking to help authors write the language effectively.</description></item><item><title>What is RIDDL Based On?</title><link>https://riddl.tech/introduction/what-is-riddl-based-on/</link><pubDate>Thu, 24 Feb 2022 14:15:51 -0700</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/introduction/what-is-riddl-based-on/</guid><description>The RIDDL specification language borrows concepts from:
Domain Driven Design (DDD) Reactive System Architecture (RSA) C4 Model Of Software Architecture Akka Agile User Stories Behavior Driven Development (BDD) Finite State Machines Command/Query Separation CQRS Event Sourcing Saga Pattern Unified Modeling Language (UML) RIDDL aims to capture business concepts, system designs and architectural details in a way that is consumable by business professionals yet can also be directly translated into various technical and non-technical artifacts, including:</description></item><item><title>Domain</title><link>https://riddl.tech/guides/developers/grammar/domain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/guides/developers/grammar/domain/</guid><description>See domains for examples and explanations of the following grammar productions
(* RIDDL EBNF Grammar for knowledge domains *) domain include = &amp;#34;include&amp;#34;, literalString domain content = typeDef | topic | interaction | context | domain | domainInclude domain = &amp;#34;domain&amp;#34;, identifier, &amp;#34;is&amp;#34;, &amp;#34;{&amp;#34;, (undefined | domainContent), &amp;#34;}&amp;#34;, description</description></item><item><title>Examples</title><link>https://riddl.tech/language/common/examples/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/language/common/examples/</guid><description>RIDDL uses Gherkin examples in various places to express a functionality or behavior requirement on the definition that uses it. Gherkin examples are used in these places:
Adaptors Handlers Functions Processors Projections Saga Actions Story Structure Gherkin is a language developed by SmartBear Software, a vendor of software quality tools, for the cucumber testing system. RIDDL uses a subset of the language as SmartBear has defined it. Four constructs are used in RIDDL:</description></item><item><title>Hugo Docs</title><link>https://riddl.tech/tooling/riddlc/translation/hugo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/tooling/riddlc/translation/hugo/</guid><description>One of the main features of the RIDDL compiler is generating HTML documentation. The documentation enjoys the advantage of being more complete and accurate due to the compiler&amp;rsquo;s rigorous analyses. The riddlc compiler generates Hugosources for conversion to a web-site by the hugo generator. See Hugo Documentation for details on how to</description></item><item><title>Installing `riddlc`</title><link>https://riddl.tech/tooling/riddlc/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/tooling/riddlc/install/</guid><description>This guide helps you to install the riddlc tool on your local computer. Before installation, you will need to follow the steps defined on the build page.
Universal Installer RIDDL&amp;rsquo;s build system can generate a universal installation package that produces a zip file that can be unpacked and it provides a script to run on MacOS, Windows, and Linux.
1. Build Universal Installer &amp;gt; project riddlc &amp;gt; universal:packageBin 2. Move Generated ZIP File a.</description></item><item><title>Processors</title><link>https://riddl.tech/language/root/domain/streaming/processor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/language/root/domain/streaming/processor/</guid><description>As the name indicates, a RIDDL processor definition specifies the inputs and outputs of some processor of data. The inputs to the processor are declared with inlet statements and the outputs from the processor are declared with outlet statements.
Inlets An inlet statement in the definition of a processor provides the name and data type for an input to the processor. There can be multiple inlets to the processor but each one must have a separate inlet statement.</description></item><item><title>Reactive BBQ</title><link>https://riddl.tech/tutorial/rbbq/reactivebbq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/tutorial/rbbq/reactivebbq/</guid><description>Render https://github.com/reactific/riddl-examples/blob/main/src/riddl/ReactiveBBQ/ReactiveBBQ.riddl Everything in RIDDL revolves around creating domains and subdomains. These are logical groupings of definitions that belong together, presumably because they mimic and organizations structure or some other logical, real world groupings. Domains can be nested.
At this top level of definition we can see that a single domain named ReactiveBBQ represents the entire enterprise. The details of that top level domain is abstracted away via three include statements within its body, one for each of the subdomains:</description></item><item><title>Types</title><link>https://riddl.tech/language/common/types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/language/common/types/</guid><description>Introduction The RIDDL language allows users to define data types. Definitions of types are more limited in RIDDL than in programming languages on purpose. The type system must be easily understandable by non-programmers as the domain engineer or domain expert is likely the most frequent user.
Predefined Types RIDDL supports several predefined types that just &amp;ldquo;exist&amp;rdquo; because they are fundamental and well understood in any targeted computing environment. These predefined type names can be used anywhere that a type definition is needed, for example in a field of an entity&amp;rsquo;s state definition see here</description></item><item><title>Expressions</title><link>https://riddl.tech/language/common/expressions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/language/common/expressions/</guid><description>RIDDL allows expressions to be specified in various places. Most frequently they are the operands to message constructors and when clauses in Gherkin examples. This page shows you what you can do with expressions in RIDDL.
Expressions Expressions compute values of arbitrary types. Since RIDDL is not a programming language, the syntax used for expressions is minimal and abstract. There is no attempt in RIDDL to be computationally complete. Supporting expression is merely for the convenience to requirements writers.</description></item><item><title>Who Can Benefit From RIDDL?</title><link>https://riddl.tech/introduction/who-can-benefit-from-riddl/</link><pubDate>Sun, 25 Sep 2022 10:07:32 -0700</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/introduction/who-can-benefit-from-riddl/</guid><description>RIDDL is technology-agnostic, but not design-agnostics. It is purposefully aimed at the design of large scale, distributed systems based on reactive architecture. It allows specification of the design of a system, without regard to programming language, cloud vendor choice, or specific technology choices. Using RIDDL allows a living design to evolve through every stage of the development process and then through continuing maintenance and evolution of the system designed.
Consequently, the people who can benefit from RIDDL are those who are building such systems that want a precise and consistent way of specifying its evolving design as a guide to all stakeholders.</description></item><item><title>Server</title><link>https://riddl.tech/tutorial/rbbq/scenario/server/</link><pubDate>Fri, 25 Feb 2022 14:37:06 -0700</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/tutorial/rbbq/scenario/server/</guid><description>What is your role in the restaurant?
I greet guests at their table, help them understand the menu and make recommendations, then take their food and drink orders. After taking their order I input it into our computer system. When the order is ready I pick it up from the kitchen or bar and deliver it to the table.
When the guest is finished, I present the bill and settle at the table.</description></item><item><title>Compilation</title><link>https://riddl.tech/tooling/riddlc/compilation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/tooling/riddlc/compilation/</guid><description>Introduction The Riddl compiler performs several analyses which are described in this section and known collectively as compilation. Each of these analyses occurs in a compilation phase, as described in the following sections.
Lexical Analysis Riddl uses the excellent fastparse library by Li Haoyi. This phase parses the raw textual input to make sure it is syntactically correct. From that syntax, an abstract syntax tree (AST) is produced. Incorrect syntax leads to errors without further analysis.</description></item><item><title>Context</title><link>https://riddl.tech/guides/developers/grammar/context/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/guides/developers/grammar/context/</guid><description>DDD bounded contexts are represented in RIDDL with the context definition whose syntax is:
(* RIDDL EBNF Grammar for bounded contexts *) context options = options(&amp;#34;wrapper&amp;#34; | &amp;#34;gateway&amp;#34; | &amp;#34;function&amp;#34;) context include = &amp;#34;include&amp;#34;, literalString context definitions = typedef | entity | adaptor | interaction | contextInclude context = &amp;#34;context&amp;#34;, identifier, is, open, (undefined | context options, context definitions), close, description }</description></item><item><title>Features</title><link>https://riddl.tech/language/root/domain/context/features/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/language/root/domain/context/features/</guid><description>A Feature is a requirement on a context. Features are specified very similarly to the Gherkin language. The same keywords are used and the style is more like RIDDL syntax. If you&amp;rsquo;re already familiar with Gherkin then an example should suffice:
Feature &amp;#34;Guess the word&amp;#34; is { // The first example has two steps Scenario &amp;#34;Maker starts a game&amp;#34; is { When the Maker starts a game Then the Maker waits for a Breaker to join } // The second example has three steps Scenario &amp;#34;Breaker joins a game&amp;#34; is { Given the Maker has started a game with a word When the Breaker joins the Maker&amp;#39;s game Then the Breaker must guess a word knowing the length of the Maker&amp;#39;s word choice.</description></item><item><title>Includes</title><link>https://riddl.tech/language/common/includes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/language/common/includes/</guid><description>An include statement is not a RIDDL definition but an instruction to the compiler to lexically replace the include statement with the content of another file. The name of the file to include is the statement&amp;rsquo;s only parameter, like this:
include &amp;#34;other-file.riddl&amp;#34; The include statement is only permitted where major definitions are expected, specifically at root level, and in the bodies of domain, context, entity, and pipe definitions.</description></item><item><title>OpenAPI</title><link>https://riddl.tech/future-work/openapi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/future-work/openapi/</guid><description>RIDDL can generate OpenAPI (Swagger) input to document Application Programming Interfaces</description></item><item><title>Plants</title><link>https://riddl.tech/language/root/domain/streaming/plant/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/language/root/domain/streaming/plant/</guid><description>A RIDDL plant is a definition that combines pipes with processors to specify a model of how data should flow. You may define as many plants as needed but each plant is a closed system without the ability of the RIDDL model to express the sharing of data between the plants. This is done deliberately to prevent unintentional contamination of data in large models.
Joints The purpose of a plant definition is to provide the blueprint for how a set of pipes, processors, and entities are joined together so that data may flow end-to-end.</description></item><item><title>Principles</title><link>https://riddl.tech/guides/developers/principles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/guides/developers/principles/</guid><description>RIDDL is a high level system specification language and as such must obey some principles of such languages. This page provides those principles.
1: Declarative RIDDL is not an implementation language and does not pretend to be computationally complete. RIDDL adopts this what not how principle. Details are for software developers. The analyst or architect that writes RIDDL documents wants to only specify what the system is while abstracting away the process of constructing it.</description></item><item><title>Bartender</title><link>https://riddl.tech/tutorial/rbbq/scenario/bartender/</link><pubDate>Fri, 25 Feb 2022 14:37:14 -0700</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/tutorial/rbbq/scenario/bartender/</guid><description>What is your role in the restaurant?
I take drink orders at the bar and entertain the guests. I mix the drinks and take them to the customers when they are ready. When the customer is done for the day I help them settle their tab.
I also mix drink orders for the servers in the restaurant. The servers deliver those drinks. I just get them ready and leave them on a tray with the table number so the servers know where they go.</description></item><item><title>Compiling RIDDL</title><link>https://riddl.tech/tooling/riddlc/compilation-phases/</link><pubDate>Fri, 25 Feb 2022 10:35:37 -0700</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/tooling/riddlc/compilation-phases/</guid><description>Introduction The Riddl compiler (riddlc) performs several functions. These functions are organized into phases of execution which we will summarize below. Each phase generates outputs that are used as inputs for later phases.
Lexical Analysis This phase parses the raw textual input of the RIDDL sources to make sure it is syntactically correct. As the RIDDL source is analyzed an in-memory model of the RIDDL file known as an abstract syntax tree (AST) is constructed.</description></item><item><title>Who Made RIDDL Possible?</title><link>https://riddl.tech/introduction/who-made-riddl-possible/</link><pubDate>Fri, 25 Feb 2022 10:07:32 -0700</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/introduction/who-made-riddl-possible/</guid><description>Originator Reid Spencer Deeply experienced system architect, software developer and entrepreneur. Initiated RIDDL in 2019 and started committing changes to the repository at the end of 2021 Founder of Reactific Software LLC which was bought by Ossum Inc. in 2022 which he also founded. Contributors James Lovell The original enthusiast, co-conspirator, shaper and user of the language, etc. RIDDL wouldn&amp;rsquo;t be where it is today without James&amp;rsquo; contributions.
Kevin D&amp;rsquo;Vincenzo An early implementor of a hugo translator that inspired much of the current implementation.</description></item><item><title>Context Handler</title><link>https://riddl.tech/language/root/domain/context/handler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/language/root/domain/context/handler/</guid><description>This page is stale and no longer accurately reflects context handlers. Please refer to the handler concept for further clarity. ß A handler definition in a context specifies how that bounded context should handle messages sent to it.
Note that an Entity can define a handler too, but they are different than the handlers defined in a context. See Entity Handler for more details. There are two kinds of handlers as described in the following sections.</description></item><item><title>Entity</title><link>https://riddl.tech/guides/developers/grammar/entity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/guides/developers/grammar/entity/</guid><description>(* RIDDL EBNF Grammar For Entity definition *) entity = entity kind, &amp;#34;entity&amp;#34;, &amp;#34;is&amp;#34;, &amp;#34;{&amp;#34;, entity options, entity definitions, &amp;#34;}&amp;#34;, description ; entity kind = [ &amp;#34;device&amp;#34; | &amp;#34;actor&amp;#34; | &amp;#34;concept&amp;#34;] ; entity options = single option | multi options ; single-option = &amp;#34;option&amp;#34;, &amp;#34;is&amp;#34;, entity option kinds; multi-option = &amp;#34;options&amp;#34;, &amp;#34;(&amp;#34;, { entity option kinds }, &amp;#34;)&amp;#34;; entity option kinds = &amp;#34;event sourced&amp;#34; | &amp;#34;value&amp;#34; | &amp;#34;aggregate&amp;#34; | &amp;#34;persistent&amp;#34; | &amp;#34;consistent&amp;#34; | &amp;#34;available&amp;#34;; entity definition = handler | feature | function | invariant | typeDef | state; entity definitions = entity definition { entity definition } ; entity state = &amp;#34;state&amp;#34;, identifier, &amp;#34;is&amp;#34;, &amp;#34;{&amp;#34;, identifier, &amp;#34;is&amp;#34;, typeExpression, &amp;#34;}&amp;#34;, description State A state is defined with the state keyword in the content of an entity using this syntax:</description></item><item><title>Entity Handler</title><link>https://riddl.tech/language/root/domain/context/entity/handler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/language/root/domain/context/entity/handler/</guid><description>Concept See the handler concept page for general information about handlers.
Note that a context can define a handlertoo, but they are different compared to the handlers defined in an entity. See Context Handler for details on them. Handlers are specified with the handler keyword and enclose a set of on clauses that specify what to do with a given event when that handler is active. There are four kinds of on clauses distinguished by the kind of message they handle (command, event, query, and reaction) as detailed in the following sections.</description></item><item><title>Functions</title><link>https://riddl.tech/language/common/functions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/language/common/functions/</guid><description>Introduction Functions are pieces of processing that can be defined in various places as a shorthand for often repeated processing steps. A function has a set of inputs (its requirements) and a set of output (what it yields). Functions need not be pure and often have side effects through the state changes of an entity.
Example Here&amp;rsquo;s an example of a function, named riddle, that requires a Subject(String) type and returns a Riddle (String) type.</description></item><item><title>Kalix</title><link>https://riddl.tech/future-work/kalix/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/future-work/kalix/</guid><description>The Kalix platform-as-a-service system represents one of the easiest methods by which RIDDL models can be turned into running systems. The riddlc program generates Kalix style protobuffers files from the RIDDL model. Kalix uses these files to generate Scala, Java, Javascript or Python code with a fill-in-the-blanks style for just the business logic.</description></item><item><title>Function</title><link>https://riddl.tech/language/root/domain/context/entity/functions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/language/root/domain/context/entity/functions/</guid><description>TBD</description></item><item><title>Chef</title><link>https://riddl.tech/tutorial/rbbq/scenario/chef/</link><pubDate>Fri, 25 Feb 2022 14:37:29 -0700</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/tutorial/rbbq/scenario/chef/</guid><description>What is your role in the restaurant?
I oversee the entire kitchen and all of its staff. I source local ingredients required to prepare our menu items. The menu is decided on monthly and distributed via email. I inspect all prepared orders that leave the kitchen.
What challenges do you face?
I think the worst thing is when the system that prints our orders goes haywire. Sometimes the system crashes and orders get lost.</description></item><item><title>Akka</title><link>https://riddl.tech/future-work/akka/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/future-work/akka/</guid><description>The goal of the Akka translator is to generate all the infrastructure code needed to support the domain(s) defined in the RIDDL input. While this does produce a working system, it also relieves developers of much of the repetitive, detail oriented infrastructure that is relatively boring compared to the business logic of the system.
This translator recognizes that its output will be co-mingled with the business logic output that developers are writing and keeps them separate.</description></item><item><title>Imports</title><link>https://riddl.tech/language/common/imports/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/language/common/imports/</guid><description>This feature is not implemented yet.
An import statement may be used to import a definition from a BAST file that was generated from a prior compilation. Import statements help to save time when a prior compilation has completed and been saved as a BAST file.</description></item><item><title>Cook</title><link>https://riddl.tech/tutorial/rbbq/scenario/cook/</link><pubDate>Fri, 25 Feb 2022 14:37:33 -0700</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/tutorial/rbbq/scenario/cook/</guid><description>What is your role in the restaurant?
Depending on the day, I work at different stations in the kitchen. The chef tells me where I will be working for that day. I prepare orders according to the tickets that get printed out at my station. Once an order is ready, I take it over to a station where we gather all the pieces of that order. The chef then approves it and we notifiy the server that their order is ready.</description></item><item><title>How Can I Get Help?</title><link>https://riddl.tech/introduction/how-can-i-get-help/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/introduction/how-can-i-get-help/</guid><description>Here are some options for getting help. Pick the item below that best fits your needs:
I Need A Bug Fixed I Need RIDDL To Generate Something Else I Want To Make A Feature Suggestion I Need Commercial Support I Just Want To Chat With Someone About RIDDL I Need A Bug Fixed While RIDDL is competent enough to be used for a production software project, we still consider it to be in a pre-release, early preview stage.</description></item><item><title>Other Translators</title><link>https://riddl.tech/future-work/others/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/future-work/others/</guid><description/></item><item><title>Delivery Driver</title><link>https://riddl.tech/tutorial/rbbq/scenario/deliverydriver/</link><pubDate>Fri, 25 Feb 2022 14:37:41 -0700</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/tutorial/rbbq/scenario/deliverydriver/</guid><description>What is your role in the restaurant?
I deliver for five locations around the city. We don&amp;rsquo;t get a lot of deliveries. We aren&amp;rsquo;t a pizza place after all. but our wings and ribs are popular delivery options. I am on call for each of the delivery locations. If one of them gets a delivery, I get a notification on my phone. I go pick up the food from the location nearest the customer.</description></item><item><title>Dependencies</title><link>https://riddl.tech/guides/developers/dependencies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/guides/developers/dependencies/</guid><description> Dependencies The riddl code base targets Java 17 and Scala 2.13.7 with -XSource:3 in preparation for Scala 3.0 code conversion. Moving to Scala 3 requires all dependencies to make the same transition:
fastparse uses macros and is waiting for bugs in scala 3 to be fixed pureconfig is nearly ready for scala 3</description></item><item><title>Options</title><link>https://riddl.tech/language/common/options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/language/common/options/</guid><description>Many definitions can have options. These are hints or processing instructions to the various translator tools.
need more detail</description></item><item><title>Online Customer</title><link>https://riddl.tech/tutorial/rbbq/scenario/onlinecustomer/</link><pubDate>Fri, 25 Feb 2022 14:37:49 -0700</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/tutorial/rbbq/scenario/onlinecustomer/</guid><description>Describe how you place an order online with Reactive BBQ
Well, I go to the website and they have their menu there. I have a look at the menu and decide what I want. The menu is organized into different sections, like lunch, dinner, appetizers, dessert, that sort of thing. The menu online isn&amp;rsquo;t identical to what I get in the restaurant, but it&amp;rsquo;s pretty close. I have also done it through the phone app they have.</description></item><item><title>Root</title><link>https://riddl.tech/guides/developers/grammar/root/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/guides/developers/grammar/root/</guid><description>(* RIDDL Grammar For Root - TBD *) root = domain | domain include TBD</description></item><item><title>testing</title><link>https://riddl.tech/guides/developers/testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/guides/developers/testing/</guid><description>Ways To Test RIDDL ScalaTest There are many test points already defined in language/src/tests/scala using ScalaTest. In general, any change in language should be done in TDD style with tests cases written before code to make that test case pass. This is how the parser and validator were created. That tradition needs to continue.
&amp;ldquo;Check&amp;rdquo; Tests In language/src/test/input there are a variety of tests with .check files that have the same basename as the .</description></item><item><title>Privacy Policy</title><link>https://riddl.tech/privacy-policy/</link><pubDate>Wed, 01 Dec 2021 15:34:22 -0500</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/privacy-policy/</guid><description>Static Web Site This site, https://riddl.tech/ is static. It does not use cookies, has no ability to collect your information, and does not invade your privacy. This site is merely for documentation that you may read without security concerns.</description></item><item><title>Releasing RIDDL</title><link>https://riddl.tech/guides/developers/releasing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/guides/developers/releasing/</guid><description>This is a &amp;ldquo;how to&amp;rdquo; guide on releasing the software.
Build &amp;amp; Test Make sure everything tests correctly from a clean start.
&amp;gt; cd riddl # top level directory of repository &amp;gt; sbt &amp;#34;clean ; test ; test ; test&amp;#34; ... [info] All tests passed. If all tests do not pass, stop and fix the software. Note that the tests are run three times quickly. This tends to expose parallelism issues.</description></item><item><title>Syntax Reference</title><link>https://riddl.tech/guides/authors/syntaxreference/</link><pubDate>Thu, 24 Feb 2022 14:22:41 -0700</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/guides/authors/syntaxreference/</guid><description>TBD</description></item><item><title>Syntax Cheat Sheet</title><link>https://riddl.tech/guides/authors/syntaxcheatsheet/</link><pubDate>Thu, 24 Feb 2022 14:22:21 -0700</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/guides/authors/syntaxcheatsheet/</guid><description>TBD</description></item><item><title/><link>https://riddl.tech/guides/developers/checking-documentation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/guides/developers/checking-documentation/</guid><description>After making documentation changes, it is best to visualize those changes to check that the documentation is still generating correctly and readable.
This is pretty simple.
Install Hugo You need to make sure Hugo is installed:
brew install hugo Run Hugo Then run the hugo server:
cd doc/src/hugo hugo server --disableFastRender -D The --disableFastRender means that hugo won&amp;rsquo;t cache results but read from source on each request. The -D option instructs to load all pages, even the ones marked as drafts.</description></item><item><title>Action</title><link>https://riddl.tech/concepts/action/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/concepts/action/</guid><description>An Action is something a program does. Actions are used in the then and but clauses of an example.
There are many kinds of Actions, described in the table below
Name Description Append Add an item to a field that is a collection Arbitrary A textually described arbitrary action Ask Send a message to an entity, asynchronously process result Become Instructs an entity change to a new handler Compound Execute a group of nested actions Error Produce an error with a message FunctionCall Call a function to get a result Morph Morph the state of an entity to a new state Publish Publish a message to a pipe Reply Provide the reply message to the entity that invoked a query Return Return a value from a function Set Set a field of the current state of an entity Tell Send a message to an entity, do not wait for result Yield Place a message on an entity&amp;rsquo;s event pipe Applicability Not all actions can be used in every situation.</description></item><item><title>Actor</title><link>https://riddl.tech/concepts/actor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/concepts/actor/</guid><description>An Actor is a participant in a Story. The Actor&amp;rsquo;s identifier is typically the name of a representative real user of a system and it is defined by identifying that person&amp;rsquo;s role with respect to the system.
Occurs In Domains Contains Nothing (Leaf definition)</description></item><item><title>Adaptor</title><link>https://riddl.tech/concepts/adaptor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/concepts/adaptor/</guid><description>An adaptor&amp;rsquo;s purpose is to adapt one Context to another Context. In Domain-Driven Design, this concept is known as an anti-corruption layer that keeps the ubiquitous language of one context &amp;ldquo;corrupting&amp;rdquo; the language of another context. The authors of RIDDL didn&amp;rsquo;t like that term for a variety of reasons so we have renamed the concept as adaptor in RIDDL. Same idea, different name.
Message Translation Adaptors do their work at the level of messages sent between Contexts.</description></item><item><title>Application</title><link>https://riddl.tech/concepts/application/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/concepts/application/</guid><description>An application in RIDDL represents an interface portion of a system where an actor (human or machine) initiates an action on the system. Applications only define the net result of the interaction between the actor and the application. They are abstract on purpose. That is, there is nothing in RIDDL that defines how information is provided to a user nor received from a user. This gives free latitude to the user interface designer to manage the entire interaction between human and machine.</description></item><item><title>Application Element</title><link>https://riddl.tech/concepts/element/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/concepts/element/</guid><description>Elements are the definitions that define the actor interface for an application. Every element is associated with a data type for either input or output. Actors using an application are either sending information
Element Types There is one RIDDL definition for each of the four typical categories of User Interface elements1 as shown in the table below
UI Element RIDDL Description Input Give input of data items to fill an aggregate Input Select select item(s) from a list Output View presents a data value for consideration Navigation Activate cause the application to change its context Container Group groups elements together Activate An Activate definition instructs the application to change context to a different group of elements.</description></item><item><title>Author</title><link>https://riddl.tech/concepts/author/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/concepts/author/</guid><description>An author definition merely describes one of the authors that wrote the encapsulating definition. An author definition contains the usual profile information for a human including:
full name email address name of an organization (optional) title at that organization (optional) url for more information (optional) Occurs In All vital definitions
Contains No other definitions</description></item><item><title>Context</title><link>https://riddl.tech/concepts/context/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/concepts/context/</guid><description>A context definition in RIDDL represents the notion of a bounded context from Domain Driven Design (DDD). A bounded context is an isolated portion of some knowledge domain. Consequently, in RIDDL we defined a context inside a domain. DDD uses bounded contexts to divide complexity in large knowledge domains into manageable portions. Since large knowledge domains are difficult for a single human to comprehend in its entirety, DDD uses bounded contexts as a primary structuring tool.</description></item><item><title>Definition</title><link>https://riddl.tech/concepts/definition/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/concepts/definition/</guid><description>RIDDL is a declarative language, in that it declares the definition of certain concrete concepts in a hierarchical fashion. The notion of a definition is abstract since there are many types of definitions, all described in this concepts section. Succinctly, a definition is anything that has a unique name that we call its identifier.
Common Attributes All definitions have some common attributes:
loc: The location of the definition in its input file.</description></item><item><title>Description</title><link>https://riddl.tech/concepts/description/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/concepts/description/</guid><description>Descriptions describe definitions. You can add a description to any kind of definition. Descriptions are written in Markdown format and can include any of the capabilities provided by the GeekDoc hugo formatter including mermaid based diagrams. Descriptions can also be provided in separate files and via public (no password required) HTTP URLs.
Occurs On Every kind of definition.
Contains Markdown text either directly in RIDDL, in a file, or via a URL.</description></item><item><title>Domain</title><link>https://riddl.tech/concepts/domain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/concepts/domain/</guid><description>A domain is the top-most definitional level in RIDDL. We use the word domain in the sense of a knowledge domain; like an entire business, a field of study, or some portion of these. It has nothing to do with Internet domain names. A domain is an arbitrary boundary around some subset of concepts in the universe. As with Domain Driven Design, RIDDL uses the concept of a domain to group together a set of related concepts.</description></item><item><title>Entity</title><link>https://riddl.tech/concepts/entity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/concepts/entity/</guid><description>An entity in RIDDL is the same as it is in DDD which defines it this way:
Entity Definitions
An object primarily defined by its identity is called an Entity.
and
Many objects are not fundamentally defined by their attributes, but rather by a thread of continuity and identity.
There are three main aspects to this definition of entity:
Entities in the software implementation of the model are objects, containing both state and function.</description></item><item><title>Example</title><link>https://riddl.tech/concepts/example/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/concepts/example/</guid><description>The concept for a RIDDL Examples is very similar to Dan North&amp;rsquo;s Gherkin Examples. Gherkin has been used for many years to specify test cases that serve as functional specifications as well. Gherkin is simple enough for anyone to understand them.
In RIDDL this idea is used to specify the functionality for any of the vital definitions. An Example is structured like this:
SCENARIO identifier - provides the name of the example or scenario (optional) GIVEN condition (optional) WHEN condition (optional) THEN action ELSE action (optional) The intent here is to express how in the context of some circumstance (GIVEN), when a particular thing happens (WHEN), take some action (THEN), otherwise, in that context, if that thing does not happen take some other action (ELSE).</description></item><item><title>Expression</title><link>https://riddl.tech/concepts/expression/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/concepts/expression/</guid><description>TBD - This part of RIDDL may change significantly in the future.
Literal Expressions (#literal) TBD
Numeric Expressions (#numeric) TBD
Conditions (Boolean Expressions) TBD
Occurs In Actions Contains Nothing</description></item><item><title>Field</title><link>https://riddl.tech/concepts/field/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/concepts/field/</guid><description>Fields are the unit of composition of an aggregate type, state, or projection. A field is a simple mapping of a name to a type. For example:
name: Number
specifies that the field named name has type Number. Fields are most often referenced in actions and expressions to supply values over which computations are performed.
Occurs In Types States Projections Contains Nothing</description></item><item><title>Function</title><link>https://riddl.tech/concepts/function/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/concepts/function/</guid><description>A function definition provides a way to not repeat yourself in other definitions. We can define functions in several places and then use them in an expression or action. This way, we only need to define the logic for something once.
Occurs In Contexts Entities Handlers Contains Fields Examples Functions</description></item><item><title>Group</title><link>https://riddl.tech/concepts/group/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/concepts/group/</guid><description>A group is the abstract structuring concept for an application. Groups can be nested which allows them to form a hierarchy that defines the structure of a user interface. Each group can also contain UI elements such as inputs and outputs as well as types. To make this more tangible, groups could be used to model the following implementation concepts:
HTML forms, pages, containers, and sections mobile application screens, pages, forms and containers accordions (vertically stacked list of items with show/hide functionality) A UI designer is free to arrange the contained elements in any fashion, but presumably in a way that is consistent with their overall UI design theme.</description></item><item><title>Handlers</title><link>https://riddl.tech/concepts/handler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/concepts/handler/</guid><description>A handler is a very important definition in RIDDL because it is RIDDL&amp;rsquo;s way of expressing both business logic and relationships between the various components in a model. Handlers do that by specifying what should be done whenever a message of a particular type is received by its parent definition. Handlers are composed as a set of on clauses that connect a message with an [example]/concepts/example/. The example specifies the business logic that should be executed upon receipt of the message.</description></item><item><title>Includes</title><link>https://riddl.tech/concepts/include/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/concepts/include/</guid><description>Includes permit you to include content from a file into the definition in which it occurs.
Occurs In All vital definitions
Contains Content relevant to the definition in which it is used. The input must conform to the hierarchy shown in the index</description></item><item><title>Inlets</title><link>https://riddl.tech/concepts/inlet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/concepts/inlet/</guid><description>An Inlet is a component of a Processor that specifies a named input through which data of a particular type streams into the processor.
Occurs In Processors Contains Nothing</description></item><item><title>Input</title><link>https://riddl.tech/concepts/input/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/concepts/input/</guid><description>An Input is the abstract notion of some information provided to an application by its user (an actor). To make this more tangible, inputs could be implemented as any of the following:
the submission of a typical htML form a user could fill in, the tap of a button on a mobile device, the selection of items from a list on a native application, a voice response providing information via any IVR system, a thought interpreted by a neural link, a physical movement interpreted by a motion-detection device, a retinal scan, picking items from lists of information by looking and blinking or any other system by which a human may provide information to a machine The nature of the implementation for an input is up to the UI Designer.</description></item><item><title>Invariants</title><link>https://riddl.tech/concepts/invariant/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/concepts/invariant/</guid><description>An invariant is a logical expression that must always hold true. They can be used to validate state changes in entities, or parameter values in functions.
Occurs In Entities - specifies a rule on the state of an entity Functions - specifies a rule on the input parameters of a function Contains Nothing</description></item><item><title>Joints</title><link>https://riddl.tech/concepts/joint/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/concepts/joint/</guid><description>Joints join Processor Inlets or Outlets to pipes. There are two kinds of joints:
InletJoint - connects an Inlet to a Pipe OutletJoint - connects and Outlet to a Pipe Joints are necessary to set up a pipeline in a Plant which must flow data from source to [sink](/concepts/processor/].
Occurs In Plants Contains Nothing</description></item><item><title>Messages</title><link>https://riddl.tech/concepts/message/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/concepts/message/</guid><description>Messages are a foundational concept in RIDDL because a RIDDL model implies an implementation that is a message-driven system per the Reactive Manifesto. Messages in RIDDL are a special case of an aggregate type and the lingua franca of many RIDDL definitions. They define the API for:
adaptors
applications
contexts
entitys
[processors](/concepts/processor/
projections
and repositories
That is, these are the fundamental building blocks of a message-driven system
Differences Between Kinds of Messages RIDDL follows Bertrand Meyer&amp;rsquo;s notion of command/query separation which states, in the context of object-oriented programming in Eiffel that:</description></item><item><title>On Clauses</title><link>https://riddl.tech/concepts/onclause/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/concepts/onclause/</guid><description>An On Clause specifies how to handle a particular kind of message as part of the definition of a [handler](/concepts/handler/. An On Clause is associated with a specific message definition and contains an example that defines the handling of that message by the handler&amp;rsquo;s parent. An On Clause is also optionally associated with an entity or pipe) as the sender of a message.
Occurs In Handlers - the handler to which the On clause is applied Contains Examples - specifies what should happen when the event occurs</description></item><item><title>Options</title><link>https://riddl.tech/concepts/option/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/concepts/option/</guid><description>Options are instructions to translators on how a particular definition should be regarded. Any translator can make use of any option. Options can take a list of string arguments much like the options and arguments to a program. If none are specified, the option is considered to be a Boolean value that is true if specified.
Every vital definition in RIDDL allows a technology option that takes any number of string arguments.</description></item><item><title>Outlets</title><link>https://riddl.tech/concepts/outlet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/concepts/outlet/</guid><description>An Outlet is a component of a Processor that specifies a named input through which data of a particular type streams out of the processor.
Occurs In Processors Contains Nothing</description></item><item><title>Output</title><link>https://riddl.tech/concepts/output/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/concepts/output/</guid><description>An Output definition is concerned with providing information to the user (an actor) without regard to the form of that information when presented to the user. To make this more tangible, an Output could be implemented as any of the following:
the text shown on a web page or mobile application the display of an interactive graphic, chart, etc. the presentation of a video or audio recording haptic, olfactory or gustatory feedback any other way in which a human can receive information from a machine.</description></item><item><title>Pipes</title><link>https://riddl.tech/concepts/pipe/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/concepts/pipe/</guid><description>Pipes are uni-directional conduits for reliably transmitting data of a particular type. Pipes always make connections between an InletJoint (the source of data) and an OutletJoint. These joints are always attached to a processor, even possibly the same processor (making a feedback loop).
Data Transmission Type Pipes can transmit any data type that RIDDL can specify. There is only one data type that flows in a pipe. The transmission type is often used with an alternation of messages such as the commands and queries that an entity might receive.</description></item><item><title>Plants</title><link>https://riddl.tech/concepts/plant/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/concepts/plant/</guid><description>RIDDL supports the definition of complex data streaming models. There are three basic definitions involved in setting up a pipeline: a plant, a pipe, and a processor. There are several kinds of pipes and processors, and they can be combined to form entire systems of data processing known as a plant. These metaphors come from chemical processing concepts which you can visualize as something like this:
All you have to do is remember the 3 P&amp;rsquo;s:</description></item><item><title>Processors</title><link>https://riddl.tech/concepts/processor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/concepts/processor/</guid><description>A processor is a component of any vital definition. Processors perform some transformation, typically, of the data flowing in from itsinlet(s) and produces some, potentially different, data to its [outlet(s)]({{&amp;gt; relref outlet &amp;gt;}}).
Inlets An inlet provides the name and data type for an input to the processor. There can be multiple inlets to the processor or none. A processor with no inlets defined is called a source since it originates data by itself.</description></item><item><title>Projections</title><link>https://riddl.tech/concepts/projection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/concepts/projection/</guid><description>Projections get their name from
Euclidean Geometry but are probably more analogous to a relational database view. The concept is very simple in RIDDL: projections gather data from entities and other sources, transform that data into a specific record type, and support querying that data arbitrarily.
Projections transform update events from entities into a data set that can be more easily queried. Projections have handlers that specify both how to apply updates to the projections state and satisfy queries against that state.</description></item><item><title>Root</title><link>https://riddl.tech/concepts/repository/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/concepts/repository/</guid><description>A RIDDL repository is an abstraction for anything that can retain information(e.g. messages)for retrieval at a later time. This might be a relational database, NoSQL database, a data lake, an API, or something not yet invented. There is no specific technology implied other than the retention and retrieval of information. You should think of repositories more like a message-oriented version of the Java Repository Pattern than any particular kind of database.</description></item><item><title>Root</title><link>https://riddl.tech/concepts/root/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/concepts/root/</guid><description>The root concept refers to the container of domains. Domains are the top level definition in RIDDL but because RIDDL is hierarchical, and you can have more than one domain definition at the top level, something has to contain those top level domains. We call that the root. A root is not a definition since it has no name. You can think of a root as the file in which a domain is defined.</description></item><item><title>Saga Steps</title><link>https://riddl.tech/concepts/sagastep/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/concepts/sagastep/</guid><description>One step in a saga. Each step has input arguments and yields output. It also has both do and undo examples for its action and compensating action.
Occurs In Contexts Contains Examples</description></item><item><title>Sagas</title><link>https://riddl.tech/concepts/saga/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/concepts/saga/</guid><description>A Saga is a distributed persistent transaction that uses the Saga Pattern. Sagas are used to coordinate state changes across multiple components (typically entities) in a system. Every change (action) has a compensating action to undo the action. This permits an organized rollback if one component cannot proceed with the transaction.
Occurs In Contexts Contains SagaStep</description></item><item><title>Search Result</title><link>https://riddl.tech/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/search/</guid><description/></item><item><title>States</title><link>https://riddl.tech/concepts/state/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/concepts/state/</guid><description>A State defines the state of an entity. It is defined as a set of fields with a handler that defines how messages cause changes to the value of those fields.
An entity can have multiple state definitions with the implication that this entity would be considered a Finite State Machine. However, it would only be such if the entity used the finite state machine option.
Occurs In Entities Contains Fields Handler</description></item><item><title>Stories</title><link>https://riddl.tech/concepts/story/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/concepts/story/</guid><description>A story in RIDDL is a definition that defines a user story. This is the same concept as the idea Kent Beck introduced in 1997. In RIDDL, a story gets a little more involved than the usual formulations of a user story:
As an {actor}, I would like {capability}, so that {benefit}
or
In order to receive {benefit}, as an {actor}, I can {capability}
which have these three ideas:
An actor that provides the role played by the narrator of the story A capability that provides the capability used by the narrator A benefit that provides the reason why the narrator wants to use the capability A RIDDL Story also provides a set of cases that relate the story to other RIDDL components through the steps taken for each [case](/concepts/case/.</description></item><item><title>Story Case</title><link>https://riddl.tech/concepts/case/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/concepts/case/</guid><description>Stories are specified with multiple case definitions that it contains. A case in this context is a use case, that is, a set of steps that define the interaction between components. Multiple cases are often needed to show both happy and unhappy paths.
A case is composed of a set of steps. Those steps consist of a described relationship between two components. These can be general (any component to any component) or specific for certain pairs of components.</description></item><item><title>Terms</title><link>https://riddl.tech/concepts/term/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/concepts/term/</guid><description>A Term is merely a glossary entry. Since DDD requires bounded contexts to have precise terminology, the Term definition allows model authors to include a word definition that is not a definition in the model.
Occurs In All vital definitions
Contains Nothing</description></item><item><title>Types</title><link>https://riddl.tech/concepts/type/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/concepts/type/</guid><description>Introduction The RIDDL language allows users to define types of data, or information. RIDDL&amp;rsquo;s type system is fairly rich, for a specification language, providing abstractions for many concretely common information structures. This is done to make it easier for domain engineers and experts to understand the models they are creating.
A type defines the shape of some information. There are many kinds of type definitions allowed, so we have grouped them into categories:</description></item><item><title>Vital Definitions</title><link>https://riddl.tech/concepts/vital/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reid@reactific.com (Reid Spencer)</author><guid>https://riddl.tech/concepts/vital/</guid><description>Not all definitions are equal. The RIDDL language considers some definitions to be more important than others, and we call these &amp;ldquo;vital definitions&amp;rdquo;. You can recognize a vital definition because they all have
Examples somewhere in their definitional hierarchy.
These are the vital definitions:
Adaptors, [Applications]/concepts/application/), Contexts, Domains, Functions, Entities, Handlers, Plants, Processors, Projections, Repositories Sagas, and Stories.</description></item></channel></rss>